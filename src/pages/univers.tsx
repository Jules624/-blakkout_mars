import React, { useState } from 'react';
import { NextSeo } from 'next-seo';
import { motion, AnimatePresence } from 'framer-motion';
import Image from 'next/image';

import Layout from '@/components/layout/Layout';
import MarkdownReveal from '@/components/content/MarkdownReveal';

import { useEasterEggs } from '@/context/EasterEggContext';

// Contenu markdown pour le lore
const loreMd = `
# L'ORIGINE DE @BLAKKOUT_MARS

En 2077, une panne d'√©lectricit√© massive a plong√© Marseille dans l'obscurit√© pendant 72 heures. 
Cette p√©riode, connue sous le nom de "Blackout de Mars", a marqu√© le d√©but d'une nouvelle √®re.

## LA NAISSANCE DU COLLECTIF

Dans l'obscurit√© totale, un groupe de hackers, d'artistes et de visionnaires s'est r√©uni.
Ils ont d√©couvert que la panne n'√©tait pas accidentelle, mais le r√©sultat d'une exp√©rience technologique secr√®te.

## LA MISSION

Depuis ce jour, @BLAKKOUT_MARS ≈ìuvre dans l'ombre pour :
- R√©v√©ler les v√©rit√©s cach√©es
- Cr√©er des exp√©riences immersives uniques
- Rassembler une communaut√© de rebelles num√©riques
- Pr√©parer l'humanit√© aux d√©fis technologiques futurs

## L'H√âRITAGE

Chaque √©v√©nement, chaque cr√©ation, chaque ligne de code porte en elle l'esprit de cette nuit fondatrice.
Nous sommes les gardiens de la lumi√®re dans l'obscurit√© num√©rique.
`;

// √ânigmes interactives
const enigmes = [
  {
    id: 'neural-cipher',
    title: 'CHIFFRE NEURAL',
    difficulty: 'FACILE',
    content: 'D√©codez ce message : 01000010 01001100 01000001 01001011 01001011 01001111 01010101 01010100',
    hint: 'Convertissez le binaire en ASCII',
    solution: 'BLAKKOUT',
    isLocked: false,
  },
  {
    id: 'system-puzzle',
    title: 'PUZZLE SYST√àME',
    difficulty: 'MOYEN',
    content: 'Trouvez le mot de passe : La somme des positions alphab√©tiques de M-A-R-S multipli√©e par 2077',
    hint: 'M=13, A=1, R=18, S=19. Calculez (13+1+18+19) √ó 2077',
    solution: '106027',
    isLocked: true,
  },
  {
    id: 'terminal-access',
    title: 'ACC√àS TERMINAL',
    difficulty: 'DIFFICILE',
    content: 'Le code est cach√© dans le nom des trois premiers √©v√©nements. Prenez la premi√®re lettre de chaque mot, inversez l\'ordre et remplacez les voyelles par leur position dans l\'alphabet.',
    hint: 'Les trois premiers √©v√©nements √©taient: NEURAL NETWORK, SYSTEM FAILURE, TERMINAL ACCESS',
    solution: 'TSN',
    isLocked: true,
  },
];

export default function Univers() {
  const [activeTab, setActiveTab] = useState<'lore' | 'enigmes'>('lore');
  const [solvedEnigmes, setSolvedEnigmes] = useState<string[]>([]);
  const { activateEasterEgg } = useEasterEggs();
  
  // V√©rifier si une √©nigme est r√©solue
  const isEnigmeSolved = (id: string) => solvedEnigmes.includes(id);
  
  // R√©soudre une √©nigme
  const solveEnigme = (id: string) => {
    if (!isEnigmeSolved(id)) {
      setSolvedEnigmes([...solvedEnigmes, id]);
      
      // Activer un easter egg si toutes les √©nigmes sont r√©solues
      if (solvedEnigmes.length + 1 === enigmes.length) {
        activateEasterEgg('allEnigmasSolved');
      }
    }
  };
  
  return (
    <Layout>
      <NextSeo title="Univers" />
      
      <div className="circuit-bg py-20 pt-32">
        <div className="container mx-auto px-4">
          <motion.div
            className="mb-12 text-center"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.6 }}
          >
            <h1 className="mb-4 text-4xl font-bold text-white md:text-6xl">
              L'UNIVERS
            </h1>
            <p className="text-xl text-gray-300">
              Plongez dans l'histoire et les myst√®res de @BLAKKOUT_MARS
            </p>
          </motion.div>

          {/* Navigation des onglets */}
          <div className="mb-8 flex justify-center">
            <div className="flex rounded-lg bg-gray-800 p-1">
              <button
                onClick={() => setActiveTab('lore')}
                className={`px-6 py-3 rounded-md font-medium transition-all ${
                  activeTab === 'lore'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                LORE
              </button>
              <button
                onClick={() => setActiveTab('enigmes')}
                className={`px-6 py-3 rounded-md font-medium transition-all ${
                  activeTab === 'enigmes'
                    ? 'bg-blue-600 text-white'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                √âNIGMES
              </button>
            </div>
          </div>

          <AnimatePresence mode="wait">
            {activeTab === 'lore' && (
              <motion.div
                key="lore"
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: 20 }}
                transition={{ duration: 0.3 }}
                className="mx-auto max-w-4xl"
              >
                <div className="rounded-lg bg-gray-900/50 p-8 backdrop-blur-sm">
                  <MarkdownReveal content={loreMd} />
                </div>
              </motion.div>
            )}

            {activeTab === 'enigmes' && (
              <motion.div
                key="enigmes"
                initial={{ opacity: 0, x: 20 }}
                animate={{ opacity: 1, x: 0 }}
                exit={{ opacity: 0, x: -20 }}
                transition={{ duration: 0.3 }}
                className="mx-auto max-w-4xl"
              >
                <div className="space-y-6">
                  {enigmes.map((enigme, index) => (
                    <motion.div
                      key={enigme.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className={`rounded-lg p-6 backdrop-blur-sm ${
                        enigme.isLocked && !isEnigmeSolved(enigmes[index - 1]?.id)
                          ? 'bg-gray-800/30 border border-gray-700'
                          : 'bg-gray-900/50 border border-gray-600'
                      }`}
                    >
                      <div className="mb-4 flex items-center justify-between">
                        <h3 className="text-xl font-bold text-white">
                          {enigme.title}
                        </h3>
                        <div className="flex items-center space-x-2">
                          <span
                            className={`px-3 py-1 rounded-full text-sm font-medium ${
                              enigme.difficulty === 'FACILE'
                                ? 'bg-green-600 text-white'
                                : enigme.difficulty === 'MOYEN'
                                ? 'bg-yellow-600 text-white'
                                : 'bg-red-600 text-white'
                            }`}
                          >
                            {enigme.difficulty}
                          </span>
                          {isEnigmeSolved(enigme.id) && (
                            <span className="text-green-400">‚úì R√âSOLU</span>
                          )}
                        </div>
                      </div>

                      {enigme.isLocked && !isEnigmeSolved(enigmes[index - 1]?.id) ? (
                        <div className="text-center py-8">
                          <div className="text-4xl mb-2">üîí</div>
                          <p className="text-gray-400">
                            R√©solvez l'√©nigme pr√©c√©dente pour d√©bloquer
                          </p>
                        </div>
                      ) : (
                        <div>
                          <p className="mb-4 text-gray-300">{enigme.content}</p>
                          
                          {!isEnigmeSolved(enigme.id) && (
                            <div className="space-y-4">
                              <details className="text-sm">
                                <summary className="cursor-pointer text-blue-400 hover:text-blue-300">
                                  üí° Indice
                                </summary>
                                <p className="mt-2 text-gray-400">{enigme.hint}</p>
                              </details>
                              
                              <div className="flex space-x-2">
                                <input
                                  type="text"
                                  placeholder="Votre r√©ponse..."
                                  className="flex-1 rounded bg-gray-800 px-4 py-2 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                  onKeyPress={(e) => {
                                    if (e.key === 'Enter') {
                                      const input = e.target as HTMLInputElement;
                                      if (input.value.toUpperCase() === enigme.solution) {
                                        solveEnigme(enigme.id);
                                        input.value = '';
                                      } else {
                                        input.classList.add('ring-2', 'ring-red-500');
                                        setTimeout(() => {
                                          input.classList.remove('ring-2', 'ring-red-500');
                                        }, 1000);
                                      }
                                    }
                                  }}
                                />
                                <button
                                  onClick={(e) => {
                                    const input = (e.target as HTMLElement).previousElementSibling as HTMLInputElement;
                                    if (input.value.toUpperCase() === enigme.solution) {
                                      solveEnigme(enigme.id);
                                      input.value = '';
                                    } else {
                                      input.classList.add('ring-2', 'ring-red-500');
                                      setTimeout(() => {
                                        input.classList.remove('ring-2', 'ring-red-500');
                                      }, 1000);
                                    }
                                  }}
                                  className="rounded bg-blue-600 px-6 py-2 text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
                                >
                                  VALIDER
                                </button>
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                    </motion.div>
                  ))}
                </div>

                {solvedEnigmes.length === enigmes.length && (
                  <motion.div
                    initial={{ opacity: 0, scale: 0.8 }}
                    animate={{ opacity: 1, scale: 1 }}
                    className="mt-8 rounded-lg bg-gradient-to-r from-green-600 to-blue-600 p-6 text-center"
                  >
                    <h3 className="mb-2 text-2xl font-bold text-white">
                      üéâ F√âLICITATIONS !
                    </h3>
                    <p className="text-green-100">
                      Vous avez r√©solu toutes les √©nigmes ! Un easter egg a √©t√© d√©bloqu√©.
                    </p>
                  </motion.div>
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </div>
    </Layout>
  );
}